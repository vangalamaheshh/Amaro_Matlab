function T = dRanger_annotate(T,build)
%
% OBSOLETE:  replaced by dRanger_annotate_sites
%
% for a list of candidate translocations generated by trans_discovery,
% creates a 'genomic_position' annotation for end1 and for end2.
%
% example annotations (listed in order of priority):
%
% 1.  "exon 3 of EGFR"
% 2.  "3'-UTR of EGFR"
% 3.  "5'-UTR of EGFR"
% 4.  "intron of EGFR: 6bp from exon 1" (gives distance to nearest exon)
% 5.  "IGR: 2Mb from EGFR" (gives distance to closest gene)
%
% Mike Lawrence 2009-02-10

if ~exist('build','var'), build='hg18'; end

D = load_genedb(build);
D.chrom = convert_chr(D.chrom);

if isfield(T,'end1')    % "trans"-type array struct (from Gaddy's function)

  fprintf('Annotating... ');
  for i=1:length(T)
    if ~mod(i,100), fprintf('%d/%d ',i,length(T)); end
    [T{i}.end1.site T{i}.end1.gene] = annotate_site(D,T{i}.end1.chr,T{i}.end1.bp1,T{i}.end1.bp2);
    [T{i}.end2.site T{i}.end2.gene] = annotate_site(D,T{i}.end2.chr,T{i}.end2.bp1,T{i}.end2.bp2);
  end
  fprintf('Done.\n');

%elseif isfield(T,'min1')    % "X"-type struct of arrays (Mike's format) with chr+min+max
%
%  fprintf('Annotating... ');
%
%  T = make_numeric(T,{'min1','min2','max1','max2','chr1','chr2'});
%
%  nt = slength(T);
%  for i=1:nt
%    if ~mod(i,100), fprintf('%d/%d ',i,nt); end
%    [T.site1{i,1} T.gene1{i,1}] = annotate_site(D,T.chr1(i),T.min1(i),T.max1(i));
%    [T.site2{i,1} T.gene2{i,1}] = annotate_site(D,T.chr2(i),T.min2(i),T.max2(i));
%  end
%  fprintf('Done.\n');
%
elseif isfield(T,'pos1')    % "X"-type struct of arrays (Mike's format) with chr+pos

  fprintf('Annotating... ');

  T = make_numeric(T,{'chr1','pos1','chr2','pos2'});

  nt = slength(T);
  for i=1:nt
    if ~mod(i,100), fprintf('%d/%d ',i,nt); end
    [T.site1{i,1} T.gene1{i,1}] = annotate_site(D,T.chr1(i),T.pos1(i),T.pos1(i));
    [T.site2{i,1} T.gene2{i,1}] = annotate_site(D,T.chr2(i),T.pos2(i),T.pos2(i));
  end
  fprintf('Done.\n');


else
  error('Unfamiliar list format');
end
