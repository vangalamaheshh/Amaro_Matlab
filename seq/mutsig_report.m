function mutsig_report(isetname,indir,P)
% mutsig_report
%
% creates report.html with the following sections:
%
% overall stats:
%    number of individuals
%    breakdown of mutations
%    mutation rates
%    number of significant genes
%    number of mutations in COSMIC
%    number of significant genes in COSMIC analysis
%    number of significant genesets
%    number of significant genesets excluding genes sig. on their own
%
% coverage and mutation rates
%    covplot    (link to hires ver)
%    bargraphs  (link to hires rver)
%
% significantly mutated genes
%    first N rows of table and link to rest of table    (link to full table)
%
% gene-gene correlations
%
% COSMIC-territory analysis
%    all rows where there n_cos>0    (link to full table if some rows omitted)
%
% clustered mutations     (link to full table)
%
% genesets
%    first N rows of table and link to rest of table
%
% genesets excluding genes significant on their own
%    first N rows of table and link to rest of table
%
% Mike Lawrence 2010-04-22

if ~exist('indir','var'), error('need indir'); end
anstem = [indir '/' isetname];

if ~exist('P','var'), P=[]; end
P=impose_default_value(P,'using_scatter_gather',false);
P=impose_default_value(P,'outdir',indir);
P=impose_default_value(P,'outfile','report.html');
P=impose_default_value(P,'truncated_sig_genes_rows',30);
P=impose_default_value(P,'truncated_gene_gene_correlations_rows',30);
P=impose_default_value(P,'truncated_cosmic_sig_genes_rows',30);
P=impose_default_value(P,'truncated_cosmic_sig_genes2_rows',30);
P=impose_default_value(P,'truncated_cosmic_mutations_rows',30);
P=impose_default_value(P,'truncated_clustered_muts_rows',30);
P=impose_default_value(P,'truncated_sig_genesets_rows',10);
P=impose_default_value(P,'truncated_sig_genesets_2_rows',10);
P=impose_default_value(P,'nontruncated_rows',inf);
P=impose_default_value(P,'mutation_preprocessing_report_file','');
P=impose_default_value(P,'mutation_filtering_report_file','');
P=impose_default_value(P, 'print_report', true);

if ~P.print_report
    return
end

if P.using_scatter_gather
  if ~P.is_gather
    fprintf('Report will be generated by gather job.\n');
    return
  end
end

fprintf('Writing MutSig report.\n');

ensure_dir_exists(P.outdir);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% copy graphics files and sig_genes file
cmd = [];
pngs = {'bargraphs.png','covplot.png','bargraphs_hires.png','covplot_hires.png'};
for i=1:length(pngs)
  if exist(pngs{i},'file')
    cmd = [cmd 'cp "' anstem '.' pngs{i} '" "' P.outdir '/' pngs{i} '";'];
  end
end
fname = [anstem '.sig_genes.txt'];
if exist(fname,'file')
  cmd = [cmd 'cp "' anstem '.sig_genes.txt" "' P.outdir '/sig_genes.txt";'];
end
if ~isempty(cmd)
  system(cmd);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% make tables:
%    MPPR = mutation preprocessing report
%    MFR  = mutation filtering report
%    MB   = mutation_breakdown
%    MR   = mutation_rates
%    PCR  = sample counts and rates (if available)
%    SG   = sig_genes
%    CSG  = cosmic_sig_genes
%    CSG2 = cosmic_sig_genes2
%    CM   = cosmic_mutations
%    CLM  = clustered_muts
%    SGS  = sig_genesets
%    SGS2 = sig_genesets_2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% see if mutation preprocessing and filtering files are available
if ~isempty(P.mutation_preprocessing_report_file) && exist(P.mutation_preprocessing_report_file,'file')
  MPPR = load_textfile(P.mutation_preprocessing_report_file);
  MPPR = ['<pre>' regexprep(MPPR,char(10),'<br>') '</pre><p>Please see MutSigPreprocess "stdout.txt" for full details.'];
end
if ~isempty(P.mutation_filtering_report_file) && exist(P.mutation_filtering_report_file,'file')
  MFR = load_textfile(P.mutation_filtering_report_file);
  MFR = ['<pre>' regexprep(MFR,char(10),'<br>') '</pre><p>Please see MutSigRun "stdout.txt" for full details.'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% see if final MAF file exists
fname = [anstem '.final_analysis_set.maf'];
if exist(fname,'file')
  MAF = ['<a href="' fname '">Final set of mutations used in analysis</a>'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% mutation_breakdown

fname = [anstem '.mutation_breakdown.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'count'});
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP.widths = 120*ones(nf,1);
  PP.maxrows = P.nontruncated_rows; MB = struct_to_html(L,PP);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% mutation_rates

fname = [anstem '.mutation_rates.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  categ_names = L.category(1:end-1);  % (for sig tables)
  L = make_numeric(L,{'n','N','rate','relative_rate'});
  if isfield(L,'rate_per_mb'), L = make_numeric(L,'rate_per_mb'); end
  if isfield(L,'exp_ns_s_ratio'), L = make_numeric(L,'exp_ns_s_ratio'); end
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP.widths = 80*ones(nf,1);
  PP.widths(grep('^category$',flds,1)) = 160;
  PP.widths(grep('^N$',flds,1)) = 120;
  idx = grep('rate|ratio',flds,1);
  PP.formnum = zeros(1,nf); PP.formnum(idx) = 1;
  PP.widths(idx) = 120;
  PP.commas = zeros(1,nf); PP.commas(grep('N',flds,1)) = 1;
  PP.maxrows = P.nontruncated_rows; MR = struct_to_html(L,PP);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% patient counts and rates

fname = [anstem '.patients.counts_and_rates.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  numflds = {'nsil_tot','nnon_tot','N_tot','rate_sil','rate_non'};
  flds2 = {'individual','n_silent','n_nonsilent','N_cov','silent_rate_per_Mb','nonsilent_rate_per_Mb'};
  if isfield(L,'ndbsnp_tot') && isfield(L,'rate_dbsnp')
    numflds = [numflds 'ndbsnp_tot','rate_dbsnp'];
    flds2 = [flds2 'n_dbSNP','dbSNP_rate_per_Mb'];
  end
  flds1 = ['name' numflds];
  L = keep_fields(L,flds1);
  L = make_numeric(L,numflds);
  L.rate_sil = L.rate_sil * 1e6;
  L.rate_non = L.rate_non * 1e6;
  if isfield(L,'rate_dbsnp')
    L.rate_dbsnp = L.rate_dbsnp * 1e6;
  end
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP.flds1 = flds1; PP.flds2 = flds2;
  PP.widths = 120*ones(nf,1);
  PP.formnum = zeros(1,nf); PP.formnum(grep('rate',flds,1)) = 1;
  PP.commas = zeros(1,nf); PP.commas(grep('N',flds,1)) = 1;
  PCR = struct_to_html(L,PP);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sig_genes

fname = [anstem '.sig_genes.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'N'});
  q = str2double(L.q); q(isnan(q)) = 0;
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP = []; PP.widths = 30*ones(1,nf);
  PP.widths(grepi('description',flds,1)) = 300;
  PP.widths(grep('^(N|p|q)$',flds,1)) = 75;

  % base composition categories:
  %    replace with "n1, n2, n3" etc... and put them in the legend
  %idx1 = max(grep('^(n|npat|nsite|nsil)$',flds,1));
  %idx2 = min(grep('^p',flds,1));
  %if ((idx2-1)-(idx1+1)+1)==length(categ_names)
  %  for i=idx1+1:idx2-1
  %    L = rename_field(L,flds{i},['n' num2str(i-idx1)]);
  %  end
  add_categ_names_to_legend = true;
  %else
  %  add_categ_names_to_legend = false;
  %end

  PP.columntextcolor = cell(nf,1);
  idx = grep('^nsil$',flds,1); PP.columntextcolor(idx) = repmat({'#808080'},length(idx),1);  % nsil in grey
  PP.rowcolor = cell(nl,1);
  idx = find(q<=0.2); PP.rowcolor(idx) = repmat({'#FFFFC0'},length(idx),1); % faint yellow rows for q<=0.2
  idx = find(q<=0.1); PP.rowcolor(idx) = repmat({'#FFFF00'},length(idx),1); % faint yellow rows for q<=0.2
  n_sig_genes = sum(q<=0.1);
  ng = nl;
  PP.maxrows = min(nl,P.truncated_sig_genes_rows); SGtrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; SG = struct_to_html(L,PP);
  SGnotes = ['<p><u>Notes</u>'...
             '<br><b>N</b> = number of sequenced bases in this gene across the individual set'...
             '<br><b>n</b> = number of (nonsilent) mutations in this gene across the individual set'...
             '<br><b>npat</b> = number of patients (individuals) with at least one nonsilent mutation'...
             '<br><b>nsite</b> = number of unique sites having a nonsilent mutation'...
             '<br><b><font color="808080">nsil</font></b> = number of silent mutations in this gene across the individual set'];
  
  if add_categ_names_to_legend && exist('categ_names','var')
    for i=1:length(categ_names)
      SGnotes = [SGnotes ...
                 '<br><b>n' num2str(i) '</b> = number of nonsilent mutations of type "' categ_names{i} '"'];
    end
  else
    SGnotes = [SGnotes ...
               '<br>(categories) = breakdown of nonsilent mutations by mutation category'];
  end

  SGnotes = [SGnotes ...
             '<br><b>null</b> = mutation category that includes nonsense, frameshift, splice-site mutations'...
             '<br><b>p_classic</b> = p-value for the observed amount of nonsilent mutations being elevated in this gene'...
             '<br><b>p_ns_s</b> = p-value for the observed nonsilent/silent ratio being elevated in this gene'...
             '<br><b>p_ks</b> = p-value for clustering of mutations (Kolmogorov-Smirnoff test)'...
             '<br><b>p_cons</b> = p-value for enrichment of mutations at evolutionarily most-conserved sites in gene'...
             '<br><b>p_joint</b> = p-value for clustering + conservation'...
             '<br><b>p</b> = p-value (overall)'...
             '<br><b>q</b> = q-value, False Discovery Rate (Benjamini-Hochberg procedure)'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% gene-gene correlations

fname = [anstem '.gene_gene_correlations.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'p','q'});
  if isfield(L,'p_lessthan_flag')
    lessthan = str2double(L.p_lessthan_flag);
    L = rmfield(L,'p_lessthan_flag');
  else
    lessthan = [];
  end
  nl = slength(L);
  flds = fieldnames(L); nf = length(flds);
  nggcl = nl;
  PP=[];
  idx = grep('^(p|q)$',flds,1);
  PP.formnum = zeros(1,nf); PP.formnum(idx) = 1;
  PP.sigfigs = zeros(1,nf); PP.sigfigs(idx) = 3;
  if ~isempty(lessthan)
    PP.lessthan = false(nl,nf);
    for i=1:length(idx)
      PP.lessthan(:,idx(i)) = lessthan;
    end
  end
  PP.widths = 120*ones(1,nf); PP.widths(idx) = 75;
  PP.rowcolor = cell(nl,1);
  idx = find(L.q<=0.2); PP.rowcolor(idx) = repmat({'#FFFFC0'},length(idx),1); % faint yellow rows for q<=0.2
  idx = find(L.q<=0.1); PP.rowcolor(idx) = repmat({'#FFFF00'},length(idx),1); % faint yellow rows for q<=0.2
  PP.maxrows = P.truncated_gene_gene_correlations_rows; GGCtrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; GGC = struct_to_html(L,PP);
  GGCnotes = ['<p><u>Notes</u>'...
              '<br><b>p</b> = probability of obtaining the observed degree of correlation or anti-correlation'...
              '<br>between the given pair of genes, calculated by performing many random permutations of the'...
              '<br>gene labels on the mutations in the dataset, thereby controling for sample-specific'...
              '<br>and gene-specific mutation rates.'...
              '<br><b>q</b> = q-value, False Discovery Rate (Benjamini-Hochberg procedure), correcting for the'...
              '<br>multiple hypotheses (one hypothesis per pair of genes considered.)'];
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% cosmic_sig_genes (COS1)

fname = [anstem '.cosmic_sig_genes.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'n','cos','n_cos','N_cos','cos_ev','p','q'});
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP=[]; PP.widths = 40*ones(1,nf);
  PP.widths(grepi('description',flds,1)) = 400;
  PP.widths(grep('^(N_cos|p|q)$',flds,1)) = 75;
  idx = grep('^(p|q)$',flds,1);
  PP.formnum = zeros(1,nf); PP.formnum(idx) = 1;
  PP.sigfigs = zeros(1,nf); PP.sigfigs(idx) = 3;
  PP.numwidth = zeros(1,nf); PP.numwidth(idx) = 8;
  PP.commas = zeros(1,nf); PP.commas(grep('N',flds,1)) = 1;
  PP.rowcolor = cell(nl,1);
  idx = find(L.q<=0.2); PP.rowcolor(idx) = repmat({'#FFFFC0'},length(idx),1); % faint yellow rows for q<=0.2
  idx = find(L.q<=0.1); PP.rowcolor(idx) = repmat({'#FFFF00'},length(idx),1); % faint yellow rows for q<=0.2
  n_cosmic_sig_genes = sum(L.q<=0.1);
  ng_co = nl;
  nn = sum(L.n_cos>0);
  PP.maxrows = min(nn,P.truncated_cosmic_sig_genes_rows); CSGtrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; CSG = struct_to_html(L,PP);
  CSGnotes = ['<p><u>Notes</u>'...
              '<br><b>n</b> = number of mutations in this gene in the individual set'...
              '<br><b>cos</b> = number of unique mutated sites in this gene in COSMIC'...
              '<br><b>n_cos</b> = overlap between <b>n</b> and <b>cos</b>'...
              '<br><b>N_cos</b> = number of individuals &times; <b>cos</b>'...
              '<br><b>cos_ev</b> = total evidence: number of reports in COSMIC for mutations seen in this gene'...
              '<br><b>p</b> = p-value for seeing the observed amount of overlap in this gene'...
              '<br><b>q</b> = q-value, False Discovery Rate (Benjamini-Hochberg procedure)'...
             ];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% cosmic_sig_genes (COS2)

fname = [anstem '.cosmic_sig_genes2.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'n','cos','n_cos','cos_ev'});
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  PP=[]; PP.widths = 40*ones(1,nf);
  PP.widths(grepi('description',flds,1)) = 400;
  ng_co2 = nl;
  nn = sum(L.cos_ev>0);
  PP.maxrows = min(nn,P.truncated_cosmic_sig_genes2_rows); CSG2trunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; CSG2 = struct_to_html(L,PP);
  CSG2notes = ['<p><u>Notes</u>'...
               '<br><b>n</b> = number of mutations in this gene in the individual set'...
               '<br><b>cos</b> = number of unique mutated sites in this gene in COSMIC'...
               '<br><b>n_cos</b> = overlap between <b>n</b> and <b>cos</b>'...
               '<br><b>cos_ev</b> = total evidence: number of reports in COSMIC for mutations seen in this gene'...
              ];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% cosmic_mutations

fname = [anstem '.cosmic_mutations.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  n_cosmic_mutations = nl;
  PP=[]; PP.widths = 75*ones(1,nf);
  PP.widths(grepi('patient',flds,1)) = 120;
  PP.maxrows = P.truncated_cosmic_mutations_rows; CMtrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; CM = struct_to_html(L,PP);
  CMnotes = [];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% clustered_muts

fname = [anstem '.clustered_muts.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'n','mindist','nmuts0','nmuts3','nmuts12','npairs0','npairs3','npairs12'});
  nl = slength(L);
  L = rmfield(L,'num'); L.rank = (1:nl)';L = orderfields_first(L,{'rank'});
  flds = fieldnames(L); nf = length(flds);
  n_clustered_muts_genes = sum(L.mindist<3);
  ng_cl = nl;
  PP=[]; PP.widths = 50*ones(1,nf);
  PP.widths(grepi('desc',flds,1)) = 500;
  PP.maxrows = P.truncated_clustered_muts_rows; CLMtrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; CLM = struct_to_html(L,PP);
  CLMnotes = ['<p><u>Notes</u>'...
              '<br><b>n</b> = number of mutations in this gene in the individual set'...
              '<br><b>mindist</b> = distance (in aa) between closest pair of mutations in this gene'...
              '<br><b>nmuts0</b> = how many mutations have another mutation at the same amino acid'...
              '<br><b>nmuts3</b> = how many mutations have another mutation within 3 amino acids'...
              '<br><b>nmuts12</b> = how many mutations have another mutation within 12 amino acids'...
              '<br><b>npairs0</b> = how many pairs of mutations are at the same amino acid'...
              '<br><b>npairs3</b> = how many pairs of mutations are within 3 aa of each other'...
              '<br><b>npairs12</b> = how many pairs of mutations are within 12 aa of each other'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sig_genesets

fname = [anstem '.sig_genesets.txt'];
if exist(fname, 'file')
  L = load_struct(fname);
  L = make_numeric(L,{'N'});
  q = str2double(L.q); q(isnan(q)) = 0;
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  L.geneset = regexprep(L.geneset,'(\S{15}_)','$1 ');
  PP = []; PP.rowcolor = cell(nl,1);
  idx = find(q<=0.2); PP.rowcolor(idx) = repmat({'#FFFFC0'},length(idx),1); % faint yellow rows for q<=0.2
  idx = find(q<=0.1); PP.rowcolor(idx) = repmat({'#FFFF00'},length(idx),1); % faint yellow rows for q<=0.2
  PP.columntextcolor = cell(nf,1);
  idx = grep('^nsil$',flds,1); PP.columntextcolor(idx) = repmat({'#808080'},length(idx),1);  % nsil in grey

  % base composition categories:
  %    replace with "n1, n2, n3" etc... and put them in the legend
  %idx1 = max(grep('^(n|npat|nsite|nsil)$',flds,1));
  %idx2 = min(grep('^p',flds,1));
  %if ((idx2-1)-(idx1+1)+1)==length(categ_names)
  %  for i=idx1+1:idx2-1
  %    L = rename_field(L,flds{i},['n' num2str(i-idx1)]);
  %  end
  add_categ_names_to_legend = true;
  %else
  %  add_categ_names_to_legend = false;
  %end
  
  n_sig_genesets = sum(q<=0.1);
  ngsets = nl;
  PP.maxrows = min(nl,P.truncated_sig_genesets_rows); SGStrunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; SGS = struct_to_html(L,PP);
  SGSnotes = ['<p><u>Notes:</u> (Please see notes under significantly mutated gene table)'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sig_genesets_2

fname = [anstem '.sig_genesets_2.txt'];
if exist(fname,'file')
  L = load_struct(fname);
  L = make_numeric(L,{'N'});
  q = str2double(L.q); q(isnan(q)) = 0;
  nl = slength(L); flds = fieldnames(L); nf = length(flds);
  L.geneset = regexprep(L.geneset,'(\S{15}_)','$1 ');
  PP = []; PP.rowcolor = cell(nl,1);
  idx = find(q<=0.2); PP.rowcolor(idx) = repmat({'#FFFFC0'},length(idx),1); % faint yellow rows for q<=0.2
  idx = find(q<=0.1); PP.rowcolor(idx) = repmat({'#FFFF00'},length(idx),1); % faint yellow rows for q<=0.2
  PP.columntextcolor = cell(nf,1);
  idx = grep('^nsil$',flds,1); PP.columntextcolor(idx) = repmat({'#808080'},length(idx),1);  % nsil in grey
  
  % base composition categories:
  %    replace with "n1, n2, n3" etc... and put them in the legend
  %idx1 = max(grep('^(n|npat|nsite|nsil)$',flds,1));
  %idx2 = min(grep('^p',flds,1));
  %if ((idx2-1)-(idx1+1)+1)==length(categ_names)
  %  for i=idx1+1:idx2-1
  %    L = rename_field(L,flds{i},['n' num2str(i-idx1)]);
  %  end
  add_categ_names_to_legend = true;
  %else
  %  add_categ_names_to_legend = false;
  %end
  
  n_sig_genesets_2 = sum(q<=0.1);
  ngsets2 = nl;
  PP.maxrows = min(nl,P.truncated_sig_genesets_2_rows); SGS2trunc = struct_to_html(L,PP);
  PP.maxrows = P.nontruncated_rows; SGS2 = struct_to_html(L,PP);
  SGS2notes = ['<p><u>Notes:</u> (Please see notes under significantly mutated gene table)'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% write report.html

H = ['<h3>MutSig results for ' isetname '</h3>'];

fname = [anstem '.num_patients.txt'];
if exist(fname,'file')
  n = load_textfile(fname);
  H = [H '<p>Number of individuals: ' n];
end

H = [H '<p><h3>Summary of findings</h3><p><table class="its">'];

if exist('n_sig_genes','var')
  H = [H '<tr><td width=350>Significantly mutated genes (q&#8804;0.1)</td><td>' num2str(n_sig_genes) '</td></tr>'];
end
if exist('n_cosmic_mutations','var')
  H = [H '<tr><td>Mutations seen in COSMIC</td><td>' num2str(n_cosmic_mutations) '</td></tr>'];
end
if exist('n_cosmic_sig_genes','var')
  H = [H '<tr><td>Significantly mutated genes on COSMIC territory</td><td>' num2str(n_cosmic_sig_genes) '</td></tr>'];
end
if exist('n_clustered_muts_genes','var')
  H = [H '<tr><td>Genes with clustered mutations (&#8804;3 aa apart)</td><td>' num2str(n_clustered_muts_genes) '</td></tr>'];
end
if exist('n_sig_genesets','var')
  H = [H '<tr><td>Significantly mutated genesets</td><td>' num2str(n_sig_genesets) '</td></tr>'];
end
if exist('n_sig_genesets_2','var')
  H = [H '<tr><td> . . . . . . . . . (excluding sig.mutated genes)</td><td>' num2str(n_sig_genesets_2) '</td></tr>'];
end
H = [H '</table>'];

if exist('MPPR','var'), H = [H '<p><h3>Mutation preprocessing</h3><p>' MPPR]; end
if exist('MFR','var'), H = [H '<p><h3>Mutation filtering</h3><p>' MFR]; end
if exist('MAF','var'), H = [H '<p><h3>Final mutation list</h3><p>' MAF]; end
if exist('MB','var'), H = [H '<p><h3>Mutation breakdown by type</h3><p>' MB]; end
if exist('MR','var'), H = [H '<p><h3>Nonsilent mutations: categories and mutation rates</h3><p>' MR]; end

covplot_filename = [isetname '.covplot.png'];
covplot_filename_hires = [isetname '.covplot_hires.png'];

bargraph_filename = [isetname '.bargraphs.png'];
bargraph_filename_hires = [isetname '.bargraphs_hires.png'];

H = [H '<p><h3>Target coverage for each individual</h3>'];
H = [H '<br><a href="' covplot_filename_hires '"><img src="' covplot_filename '" border=0></a>'];
H = [H '<br><a href="' covplot_filename_hires '">(click for higher-resolution version)</a>'];

H = [H '<hr><h3>Mutation counts, total coverage, and mutation rates for each individual</h3>'];
H = [H '<br><a href="' bargraph_filename_hires '"><img src="' bargraph_filename '" border=0></a>'];
H = [H '<br><a href="' bargraph_filename_hires '">(click for higher-resolution version)</a>'];

if exist('PCR','var')
  H2 = ['<html><h3>Mutation counts, total coverage, and mutation rates for each individual</h3>'...
        '<p>' PCR '<hr></html>'];
  save_textfile(H2, [P.outdir '/patients.counts_and_rates.html']);
  H = [H '<br><a href="patients.counts_and_rates.html">(click for tabular version)</a>'];
end

if exist('SG','var')
  H = [H '<hr><h3>Significantly mutated genes</h3> <p>' SGtrunc];
  save_textfile(['<html>' SG SGnotes '</html>'],[P.outdir '/SG_full.html']);
  H = [H '<br><a href="SG_full.html">(click for full table with ' num2str(ng) ' genes)</a>' SGnotes];
end

if exist('GGC','var')
  H = [H '<hr><h3>Gene-gene correlations / anti-correlations</h3> <p>' GGCtrunc];
  save_textfile(['<html>' GGC GGCnotes '</html>'],[P.outdir '/GGC_full.html']);
  H = [H '<br><a href="GGC_full.html">(click for full table with ' num2str(nggcl) ' gene-gene pairs)</a>' GGCnotes];
end


if exist('CSG','var') || exist('CSG2','var')
  H = [H '<hr><h3>COSMIC analyses</h3>'];
  H = [H '<p>Two distinct analyses are reported using the '...
       '<a href="http://www.sanger.ac.uk/genetics/CGP/cosmic/">COSMIC</a> database:'];
  H = [H '<br>(COS1) COSMIC used as a filter to increase power by restricting the territory of each gene'];
  H = [H '<br>(COS2) COSMIC used as a prior for the importance of a gene'];

  if exist('CSG','var')
    H = [H '<p><h3>(COS1) Significantly mutated genes (COSMIC territory only)</h3> <p>' CSGtrunc];
    save_textfile(['<html>' CSG CSGnotes '</html>'],[P.outdir '/CSG_full.html']);
    H = [H '<br><a href="CSG_full.html">(click for full table with ' num2str(ng_co) ' genes)</a>' CSGnotes];
  end
  if exist('CSG2','var')
    H = [H '<p><h3>(COS2) Genes mutated at sites that are highly reported in COSMIC</h3> <p>' CSG2trunc];
    save_textfile(['<html>' CSG2 CSG2notes '</html>'],[P.outdir '/CSG2_full.html']);
    H = [H '<br><a href="CSG2_full.html">(click for full table with ' num2str(ng_co2) ' genes)</a>' CSG2notes];
  end
  if exist('CM','var')
    H = [H '<p><h3>Mutations reported in COSMIC</h3> <p>' CMtrunc];
    save_textfile(['<html>' CM CMnotes '</html>'],[P.outdir '/CM_full.html']);
    H = [H '<br><a href="CM_full.html">(click for full table with ' num2str(n_cosmic_mutations) ' mutations)</a>' CMnotes];
  end
end

if exist('CLM','var')
  H = [H '<hr><h3>Genes with clustered mutations</h3> <p>' CLMtrunc];
  save_textfile(['<html>' CLM CLMnotes '</html>'],[P.outdir '/CLM_full.html']);
  H = [H '<br><a href="CLM_full.html">(click for full table with ' num2str(ng_cl) ' genes)</a>' CLMnotes];
end

if exist('SGS','var')
  H = [H '<hr><h3>Significantly mutated genesets</h3> <p>' SGStrunc];
  save_textfile(['<html>' SGS SGSnotes '</html>'],[P.outdir '/SGS_full.html']);
  H = [H '<br><a href="SGS_full.html">(click for full table with ' num2str(ngsets) ' genesets)</a>' SGSnotes];
end
if exist('SGS2','var')
  H = [H '<hr><h3>Significantly mutated genesets (excluding significantly mutated genes)</h3> <p>' SGS2trunc];
  save_textfile(['<html>' SGS2 SGS2notes '</html>'],[P.outdir '/SGS2_full.html']);
  H = [H '<br><a href="SGS2_full.html">(click for full table with ' num2str(ngsets2) ' genesets)</a>' SGS2notes];
end




H = [H '<hr>'];

save_textfile(H,[P.outdir '/' P.outfile]);


