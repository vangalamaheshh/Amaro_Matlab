function Cout = preproc_dividebynormals(Cin,n_closest_n,norm_collapse_method,...
    use_paired,use_all_cores_for_ref)
%PREPROC_DIVIDEBYNORMALS Normalize data set.
%
%  Use n_closest_n = 'all' for norm_select_method = 'all'; use a double for
%  norm_select_method = 'closest_n'
%
%  Default behavior is to *ignore flagged normals.*  (If histqc flag is on,
%  don't allow it into reference samples.  Use 2 to force the normal
%  through normalization.)
%
%COUT = PREPROC_DIVIDEBYNORMALS(CIN, N_CLOSEST_N, NORM_COLLAPSE_METHOD,
%USE_PAIRED, USE_ALL_CORES_FOR_REFERNCE)
%
%

%           Revisions:
%               9 Nov 07:  If inc_normalize supacc exists, don't include
%               "0" in reference samples.  Force include "2" in reference
%               samples.
%
%               18 Dec 07:  Added optional input "maxfornorms": can assign
%               maximum number of  arrays that can be passed to distance
%               function.
%
%               11 Jan 08:  Changed "maxfornorms" to be assigned
%               internally, based on memory limit (MemLimit meta value) of
%               D.
%---
% $Id$
% $Date$
% $LastChangedBy$
% $Rev$

varlist1 = {'Cin','n_closest_n','norm_collapse_method','normalize_normals','normalize_tumors','use_paired','use_all_cores_for_ref'};
required = [1 0 0 0 0 0 0];
defaults = {'err','5','''median''','0','1','0','1'};

for idx = 1:length(varlist1)
    if required(idx) && (~exist(varlist1{idx},'var') || eval(['isempty(' varlist1{idx} ')']))
        error('Required input %s undefined.',varlist1{idx})
    elseif ~exist(varlist1{idx},'var') || eval(['isempty(' varlist1{idx} ')'])
        eval([varlist1{idx} '=' defaults{idx} ';'])
    end
end

if strmatch(n_closest_n, 'all')
    norm_select_method = 'all';
else
    norm_select_method = 'closest_n';
end



%% If Cin is cell array
if ~iscell(Cin)

    Cin = {Cin};
    wascell = 0;
else
    wascell = 1;
end



for k = 1:length(Cin)   %Start loop on CIN


    % add Core label
    v=ones(1,size(Cin{k}.dat,2));
    if isfield(Cin{k}.sis,'core')
        [cores,ci,cj]=unique(get_sis(Cin{k},'core'));
        cores = strvcat(cores);
    else
        cores='GENERAL';
        cj=v;
    end
    Cin{k}=add_D_sup(Cin{k},make_sup_list('CORE',cores),make_sup_list('CORE',cores),cj,'cols');
    %<<<<<<<<<<<



    % N: 2 in ploidy column of sample info file (these samples may be used for normalization)
    % CTRL: control in type are normal samples used as internal control

    % split samples to ones used for normalization and the ones that should be normalized --> REF, CL

    %% --------------Select Reference Samples  (cell array)

    normsupacc = find_supid(Cin{k},'inc_normalization');

    %% If given array list include information, intersect inc_normalize
    %% 1s and 2s with good references
    if ~isempty(normsupacc)
        Cin{k} = check_array_includes(Cin{k},'normalization');
        if use_paired == 1
            ref = intersect(find(Cin{k}.supdat(find_supid(Cin{k},'N'),:)),find(Cin{k}.supdat(normsupacc,:)>=1));

        else
            if isfield(Cin{k}.sis,'cellxeno')


                cellxeno = get_sis(Cin{k},'cellxeno');

                ref = intersect(find(Cin{k}.supdat(find_supid(Cin{k},'N'),:) | Cin{k}.supdat(find_supid(Cin{k},'CTRL'),:)),find(~cellfun(@isempty,strfind(cellxeno,'no'))));
                ref = intersect(ref,find(Cin{k}.supdat(normsupacc,:)>=1));
            else
                ref = find(Cin{k}.supdat(find_supid(Cin{k},'N'),:) | Cin{k}.supdat(find_supid(Cin{k},'CTRL'),:));
                ref = intersect(ref,find(Cin{k}.supdat(normsupacc,:)>=1));
            end

        end


        %% Find flagged samples (those with hist_qc supdat > 0) and remove
        %% those from the list of references unless have a 2 in
        %% inc_normalize
        hist_qc_supid=find_supid(Cin{k},'hist_qc');
        if ~isempty(hist_qc_supid)
            bad_ref = setdiff(find(Cin{k}.supdat(find_supid(Cin{k},'hist_qc'),ref)>0),find(Cin{k}.supdat(normsupacc,ref)==2));
            bad_ref = ref(bad_ref);
            good_ref = setdiff(ref,bad_ref);

        else
            verbose('No hist_qc label... using all reference samples',20);
            good_ref = ref;

        end


    else
        if use_paired == 1
            ref = find(Cin{k}.supdat(find_supid(Cin{k},'N'),:));

        else

            if isfield(Cin{k}.sis,'cellxeno')
                cellxeno = get_sis(Cin{k},'cellxeno');
                ref = intersect(find(Cin{k}.supdat(find_supid(Cin{k},'N'),:) | Cin{k}.supdat(find_supid(Cin{k},'CTRL'),:)),find(~cellfun(@isempty,strfind(cellxeno,'no'))));
            else
                ref = find(Cin{k}.supdat(find_supid(Cin{k},'N'),:) | Cin{k}.supdat(find_supid(Cin{k},'CTRL'),:));
            end

        end


        % Find flagged samples (those with hist_qc supdat > 0) and remove those
        % from the list of references
        hist_qc_supid=find_supid(Cin{k},'hist_qc');
        if ~isempty(hist_qc_supid)
            bad_ref = find(Cin{k}.supdat(find_supid(Cin{k},'hist_qc'),ref)>0);
            bad_ref = ref(bad_ref);%#ok
            good_ref = setdiff(ref,bad_ref);

        else
            verbose('No hist_qc label... using all reference samples',20);
            good_ref = ref;

        end

    end   %% ---------------End finding references


    if isa(Cin{k},'datastruct')
        Ccopy = copyD(Cin{k});
    else
        Ccopy = Cin{k};
    end

    REF=reorder_D_cols(Ccopy,good_ref);

    clear Ccopy
    %% Normalize  (cell array)


    clear ref good_ref bad_ref not_ref

    % find unique CORE values
    uc=unique(Cin{k}.supdat(find_supid(Cin{k},'CORE'),:));
    if use_all_cores_for_ref
        uc=1;
    end

    % all_center used if no normals in core
    switch norm_collapse_method
        case 'mean'
            all_center=mean(REF.dat,2);
        case 'median'
            all_center=nanmedian_many(REF.dat);
        otherwise
            all_center=mean(REF.dat,2);
    end


    Cin{k}.ref=zeros(size(Cin{k}.dat));


    for i=1:length(uc)  %looping through different cores

        %%% FIXME: add inner loop on tissue type
        if use_all_cores_for_ref
            c_incore=1:size(Cin{k}.dat,2);
            ref_incore=1:size(REF.dat,2);
        else
            c_incore=find(Cin{k}.supdat(find_supid(Cin{k},'CORE'),:)==uc(i));
            ref_incore=find(REF.supdat(find_supid(REF,'CORE'),:)==uc(i));
        end

        if isempty(ref_incore)
            % normalize using all_center
            Cin{k}.dat(:,c_incore)=Cin{k}.dat(:,c_incore)-repmat(all_center,1,length(c_incore));
            Cin{k}.used_normals(c_incore)=cellstr(repmat('center of all normals',length(c_incore),1));
            verbose('Could not find reference for samples:',10);
            verbose(catn(Cin{k}.sdesc(c_incore)));
        else
            switch norm_select_method
                case 'closest_n'
                    verbose(['Using n_closest_normals (n=' num2str(n_closest_n) ')'],20);

                    memchunks = getmemchunkdims(Cin{k},'dat',1);
                    maxfornorm = memchunks(2);


                    if exist('maxfornorm','var') && ~isempty(maxfornorm) && maxfornorm && size(c_incore,2) > maxfornorm

                        tmp = c_incore;
                        d = [];

                        while ~isempty(tmp)  % Added 18 Dec 07 to allow for smaller inputs to dist
                            thisloopidx = tmp(1:min(end,maxfornorm));
                            tmp = setdiff(tmp,thisloopidx);
                            distarg2 = Cin{k}.dat(find(Cin{k}.chrn~=23),thisloopidx);

                            reftmp = ref_incore;

                            dsub = [];
                            while ~isempty(reftmp)
                                thisloopref = reftmp(1:min(end,maxfornorm));
                                reftmp = setdiff(reftmp,thisloopref);
                                refdat = REF.dat(Cin{k}.chrn~=23,thisloopref);
                                %     verbose(['Calculating Euclidean distance for' num2str(length(thisloopref)) ' x ' num2str(length(thisloopidx)) ' samples.'],30)
%                                fprintf(1,'.');
                                dsub = [dsub; dist(refdat,distarg2,'euclidean_after_med_subtract',1,1)];
                            end

                            d = [d dsub];

                        end


                    else

                        refdat = REF.dat(Cin{k}.chrn~=23,ref_incore);
                        distarg2 = Cin{k}.dat(find(Cin{k}.chrn~=23),c_incore);
                        d=dist(refdat,distarg2,'euclidean_after_med_subtract',1,1);
                        %Using ~180 samples, just HIND (~50000 markers) dist
                        %function took 90minutes if REF and Cin{k}.dat both on
                        %disk.  So put them in memory instead.

                    end


                    [tmp,same_idx1,same_idx2]=match_string_sets(REF.sdesc(ref_incore),Cin{k}.sdesc(c_incore));
                    d(sub2ind(size(d),same_idx1,same_idx2))=Inf;

                    [sd,si]=sort(d,1);
                    si(isinf(sd))=NaN;

                    for j=1:length(c_incore)
                        if use_paired
                            % find matched normal

                            % need an 'if isa(Cin{k},'datastruct') ...'
                            % here
                            use_normals=strmatch(get_sis(Cin{k},'paired',c_incore(j)),REF.sdesc,'exact');
                            if length(use_normals)>1
                                error(['more than 1 matched normal to samples: ' Cin{k}.sdesc(c_incore(j))]);
                            end
                        end
                        if ~use_paired || isempty(use_normals)
                            use_normals=ref_incore(si(1:min(size(si,1),n_closest_n),j));
                            use_normals=use_normals(~isnan(use_normals));
                        end

                        switch norm_collapse_method
                            case 'mean'

                                Cin{k}.dat(:,c_incore(j))=Cin{k}.dat(:,c_incore(j))-mean(REF.dat(:,use_normals),2);
                            case 'median'


                                %                                 %            if strcmp(CL.sdesc{cl_incore(j)},'CHAMS_p_Sty31_(CO-124089)_Mapping250K_Sty_H02_112346')
                                %                                 if c_incore(j)==3000
                                %
                                %                                 end
                                if mod(j,25) == 0
                                    verbose('Subtracting median of normals for sample %d',30,j);
                                end

                                tmp=Cin{k}.dat(:,c_incore(j));
                                refdat = REF.dat(:,use_normals);
                                mu=nanmedian_many(refdat);

                                Cin{k}.dat(:,c_incore(j))=tmp-mu; % C.dat(:,c_incore(j))-median(REF.dat(:,use_normals),2);
                                Cin{k}.ref(:,c_incore(j))=mu;
                                %            C.dat(:,c_incore(j))=C.dat(:,c_incore(j))-median(REF.dat(:,use_normals),2);


                            case 'tangent'

                                if length(use_normals)==1
                                    warning('Using tangent with 1 sample');%#ok
                                end
                                xx=tangent_normalization(Cin{k}.dat(:,c_incore(j)),REF.dat(:,use_normals));
                                Cin{k}.dat(:,c_incore(j))=xx;
                            otherwise
                                error('no such method');
                        end

                        Cin{k}.used_normals{j}=REF.sdesc(use_normals);


                    end

                case 'all'
                    verbose('Normalizing using all normals')
                    tangent_ref_set=[];
                    for j=1:length(c_incore)
                        if use_paired
                            % find matched normal
                            if ~strmatch(lower(get_sis(Cin{k},'paired',c_incore(j))),'yes')

                                paired = get_sis(Cin{k},'paired');

                                use_normals=strmatch(paired,REF.sdesc,'exact');
                                if length(use_normals)>1
                                    error(['more than 1 matched normal to samples: ' Cin{k}.sdesc(c_incore(j))]);
                                end
                            else
                                use_normals=[];
                            end
                        end
                        if ~use_paired || isempty(use_normals)
                            use_normals=ref_incore;
                        end

                        %Make take current sample out of use_normals if
                        %it's in there
                        use_normals=setdiff(use_normals,c_incore(j));
                        if isempty(use_normals)
                            Cin{k}.dat(:,c_incore(j))=Cin{k}.dat(:,c_incore(j))-repmat(all_center,1,length(c_incore));
                            Cin{k}.used_normals{j}='center of all normals';
                        else
                            switch norm_collapse_method
                                case 'mean'
                                    verbose([ 'Core ' num2str(uc(i)) ') Dividing ' num2str(length(c_incore)) ...
                                        ' by ' num2str(length(ref_incore)) ' reference samples (mean)'],20);
                                    Cin{k}.dat(:,c_incore(j))=Cin{k}.dat(:,c_incore(j))-mean(REF.dat(:,use_normals),2);
                                case 'median'
                                    verbose([ 'Core ' num2str(uc(i)) ') Dividing ' num2str(length(c_incore)) ...
                                        ' by ' num2str(length(ref_incore)) ' reference samples (median)'],20);
                                    tmp=Cin{k}.dat(:,c_incore(j));
                                    refdat = REF.dat(:,use_normals);
                                    mu=nanmedian_many(refdat);
                                    Cin{k}.dat(:,c_incore(j))=tmp-mu; % CL.dat(:,cl_incore(j))-median(REF.dat(:,use_normals),2);
                                    Cin{k}.ref(:,c_incore(j))=mu;

                                case 'tangent'
                                    verbose(['Using tangent normalization with all normals (in core)'],20);
                                    if length(use_normals)==1
                                        warning('Using tangent with 1 sample');%#ok
                                        cdat = Cin{k}.dat(:,c_incore(j));
                                        refdat = REF.dat(:,use_normals);
                                        xx=tangent_normalization(cdat,refdat);
                                        Cin{k}.dat(:,c_incore(j))=xx;
                                    else
                                        if ~isempty(setxor(tangent_ref_set,use_normals)) % did we calc q for the same normals
                                            cdat = Cin{k}.dat(:,c_incore(j));
                                            refdat = REF.dat(:,use_normals);
                                            [xx,tangent_q]=tangent_normalization(cdat,refdat);
                                            tangent_ref_set=use_normals;
                                        else
                                            cdat = Cin{k}.dat(:,c_incore(j));
                                            refdat = REF.dat(:,use_normals);
                                            xx=tangent_normalization(cdat,refdat,tangent_q);
                                        end
                                        Cin{k}.dat(:,c_incore(j))=xx;
                                    end
                                otherwise
                                    error('no such method');
                            end
                            Cin{k}.used_normals{j}=REF.sdesc(use_normals);
                        end

                    end %'all'
            end  %switch
        end

    end %core loop

    if isa(REF,'datastruct')
        deleteDfiles(REF)
    end

    Cin{k} = add_history(Cin{k},mfilename);







    % Remove Core label
    coreidx = strmatch('CORE',Cin{k}.supacc);
    Cin{k}.supacc = Cin{k}.supacc(setdiff([1:size(Cin{k}.supacc,1)],coreidx),:);
    Cin{k}.supdesc = Cin{k}.supdesc(setdiff([1:size(Cin{k}.supdesc,1)],coreidx),:);
    Cin{k}.supdat = Cin{k}.supdat(setdiff([1:size(Cin{k}.supdat,1)],coreidx),:);
    %<<<<<<<<<<<

end   %Cin{k} loop


if ~wascell
    Cout = Cin{1};
else
    Cout = Cin;
end
