function D=reorder_D_rows(D,varargin)
%REORDER_D_ROWS  Reduce data set to selected rows.
%
%   D = REORDER_D_ROWS(D,INDICES) unpacks fields from data structure D and
%   repacks using a subset of the data given 
%   by the column indices INDICES.
%
%   D = REORDER_D_ROWS(D,GSUPACC_NAME,VAL) filters the data structure for
%   rows whos GSUPACC_NAME in .gsupacc matches VAL in .gsupdat.
%
%   In both usages, data structure history is updated.
%
%   Example:  D = reorder_D_rows(D,[1:10:size(D.dat,1)]) decimates the data 
%                 structure, returning a new D with every 10th row (SNP) 
%                 included.
%
%             D = reorder_D_rows(D,'ThisSNP',1) returns a new data
%             structure consisting only of SNPs with .gsupacc  of 'ThisSNP'
%             set to 1 in the .gsupdat field.
%
%   History
%       -- 09 Oct 07  --- Added catch for if field exists but is empty at
%       line 123.
%
%`      -- 17 Oct 07  --- Added .plat to reorder fields.
%---
% $Id$
% $Date$
% $LastChangedBy$
% $Rev$

if isempty(varargin)
  error('missing argument');
elseif length(varargin)==1
    idx=varargin{1};
elseif length(varargin)==2 && ischar(varargin{1})
    idx=find_D_cols(D,varargin{1},varargin{2});
elseif length(varargin) ==2 && strcmpi(varargin{2},'allmem')
    idx = varargin{1};
    allmem = 1;
elseif length(varargin) == 3 && ischar(varargin{1}) && strcmpi(varargin{3},'allmem')
    idx = find_D_cols(D,varargin{1},varargin{2});
    allmem = 1;
end


%% Get origsize1  (origsize1 is dimension of size that needs to be changed)


if isfield(D,'dat')
    D=add_history(D,mfilename,varargin{:});  %also add history
    origsize1 = getsize(D,'dat',1);
elseif isfield(D,'chrn')
    origsize1 = getsize(D,'chrn',1);
elseif isfield(D,'pos')
    origsize1 = getsize(D,'pos',1);
elseif isfield(D,'marker')
    origsize1 = getsize(D,'marker',1);
elseif isfield(D,'affy_calls')
    origsize1 = getsize(D,'affy_calls',1);
end



%Update gdesc field
[roflds,roidx] = intersect(D.fieldnames,{'gdesc','gsymb','gacc','id','symb'});

for k = roidx
    
    if ~isempty(D.fielddata{k})
        if iscell(D.fielddata{k})
            D.fielddata{k} = D.fielddata{k}(idx);
        else
            D.fielddata{k} = deblank(D.fielddata{k}(idx,:));
        end
    end
end



k = strmatch('adat',D.fieldnames,'exact');
if ~isempty(k)
    if ~isempty(D.fielddata{k})
        D.fielddata{k} = D.fielddata(idx,:,:);
    end
end

k = strmatch('gsupdat',D.fieldnames,'exact');

if ~isempty(k)
    if size(D.fielddata{k},1) == getsize(D,'dat',1)
        warning('Recommend using a column per row in dat'); %#ok<WNTAG>
        D.fielddata{k} = D.fielddata{k}(idx,:);
    else
        D.fielddata{k} = D.fielddata{k}(:,idx);
    end
end



% Update remaining vector fields
vector_fields={'cyto','gorigidx','marker','chr','chrn','cM','pos','score','grg','start','end','ll','cyton','cyto_stain', ...
               'armn','chrloc','refgene','refgene_idx','grange','chrarmn','n_collapse','plat'};
if isfield(D,'gene_fields')
  vector_fields=[ D.gene_fields];
end


[dum,dom,vfieldsidx] = intersect(vector_fields,D.fieldnames);
for fldidx = vfieldsidx
    
    x = D.fielddata{fldidx};
        if ~isempty(x)
           
            if isvector(x)
                x=x(idx);
            else
                x=x(idx,:);
            end
          D.fielddata{fldidx} = x;
        end
  
end








%% Update remaining matrix fields


% First the disk fields
if ~exist('allmem','var') || ~allmem
    dskidx = strmatch('disk',D.storagetype,'exact')';
else
    dskidx = [];
end

for k = dskidx
    if ~isempty(D.rowmapping{k})
        D.rowmapping{k} = D.rowmapping{k}(idx);
    else
        D.rowmapping{k} = idx;
    end


end

% Now the memory fields
% Find the matrix fields by using all remaining fields with size(1) = origsize1
if exist('origsize1','var')
    matrix_fields = setdiff(D.fieldnames,[vector_fields {'sdesc','supdat','supdesc','supacc','gdesc','gsymb','gacc','id','symb','gsupdat','adat'} D.fieldnames(dskidx)]);
    mfsize = cell2mat(cellfun(@(x) getsize(D,x,1),matrix_fields,'UniformOutput',0));
    matrix_fields = matrix_fields(mfsize==origsize1);
    [dum,dum,mfidx] = intersect(matrix_fields,D.fieldnames);
else
    matrix_fields={'dat','affy_calls','affy_call','sdat',...
        'lsdat','fdat','prectrls','smooth','cbs','cbs_fixed',...
        'sm1','sm2','sm2j','sm3','raw','si','flag','hmm',...
        'pre_control_sum','sitab','ref','level','scores','orig'};
    matrix_fields = setdiff(matrix_fields,D.fieldnames(dskidx));
    [dum,dum,mfidx] = intersect(matrix_fields,D.fieldnames);
end

for j = mfidx
    if strcmp('memory',D.storagetype{j})
        x=D.fielddata{j};
        if ~isempty(x)
            x=x(idx,:);
        end
        D.fielddata{j} = x;
    else
        s(1) = struct('type','.','subs',D.fieldnames{j});
        s(2).type = '()';
        s(2).subs = {idx,':'};
        x = subsref(D,s);
        D.fielddata{j} = x;
        D.storagetype{j} = 'memory';
        D.colmapping{j} = {[]};
        D.rowmapping{j} = {[]};
    end  

end
